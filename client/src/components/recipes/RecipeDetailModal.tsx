import ReactMarkdown from "react-markdown";
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Clock, ChefHat, Users, Bookmark, ScrollText, Delete, X, Share } from "lucide-react";
import { RecipeWithAvailabilityAndId } from "@/types/recipeTypes";
import { IngredientWithId } from "@/types/ingredientTypes";
import { AvailabilityScore } from "@/types/availabilityScore";
import { LucideBookmarkFilled } from "@/components/recipes/LucideBookmarkFilled";
import { IngredientMatchingResult, calculateIngredientAvailabilityForRecipe } from "@/utils/ingredientMatching";
import { determineUsedAndMissingIngredients } from "@/utils/ingredientMatching";
import { useState } from "react";
import { LucideScrollTextFilled } from "@/components/recipes/LucideScrollTextFilled";
import { toast } from "@/hooks/useToast";
import { IconButtonWithTooltip } from "@/components/recipes/IconButtonWithTooltip";

interface RecipeDetailModalProps {
    recipe: RecipeWithAvailabilityAndId;
    isSaved: boolean;
    onClose: () => void;
    onDeleteUsedIngredients: (ingredientMatchingResult: IngredientMatchingResult) => void;
    onToggleSave: () => void;
    availableIngredients: IngredientWithId[];
}

const RecipeDetailModal = ({
    recipe,
    isSaved,
    onToggleSave,
    onClose,
    onDeleteUsedIngredients,
    availableIngredients,
}: RecipeDetailModalProps) => {
    const [showSoppingList, setShowSoppingList] = useState(false);
    const [ingredientsDeleted, setIngredientsDeleted] = useState(false);

    const ingredientsWithAvailabilityScore = recipe.ingredients.map((ingredient) => {
        return {
            ...ingredient,
            availabilityScore: calculateIngredientAvailabilityForRecipe(ingredient, availableIngredients),
        };
    });

    const getIngredientStatusColor = (availability: AvailabilityScore) => {
        switch (availability) {
            case "good":
                return "text-green-600";
            case "medium":
                return "text-yellow-600";
            case "bad":
                return "text-red-600";
            default:
                return "text-gray-600";
        }
    };

    const getIngredientStatusBadge = (availability: AvailabilityScore) => {
        return (
            <Badge variant="outline" className={`${getIngredientStatusColor(availability)} border-current`}>
                {availability === "good" ? "✓" : availability === "medium" ? "!" : "✗"}
            </Badge>
        );
    };

    const ingredientMatchingResult = determineUsedAndMissingIngredients(recipe, availableIngredients);

    const getShoppingList = () => {
        console.log("Generating shopping list with missing ingredients:", ingredientMatchingResult.missingIngredients);
        return (
            <>
                <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Shopping List</h3>
                    <ul className="space-y-2">
                        {ingredientMatchingResult.missingIngredients.map((ingredient, index) => (
                            <li
                                key={`${index}-${ingredient.name}`}
                                className="flex items-center justify-between py-2 px-3 rounded-lg bg-gray-50"
                            >
                                <span className="text-gray-900">{ingredient.name}</span>
                                <span className="text-gray-600">
                                    {ingredient.quantity} {ingredient.unit}{" "}
                                    {ingredient.unitMismatch ? "(unit mismatch)" : ""}
                                </span>
                            </li>
                        ))}
                    </ul>
                </div>
                <Separator />
            </>
        );
    };

    const shareRecipe = () => {
        const text =
            `Recipe: ${recipe.title}\n\n` +
            `Description: ${recipe.description}\n\n` +
            `Ingredients:\n` +
            ingredientsWithAvailabilityScore
                .map(
                    (ingredient) =>
                        `${ingredient.name} - ${ingredient.quantity} ${ingredient.unit} (${ingredient.availabilityScore})`
                )
                .join("\n") +
            `\n\nShopping List:\n` +
            ingredientMatchingResult.missingIngredients
                .map((ingredient) => `${ingredient.name} - ${ingredient.quantity} ${ingredient.unit}`)
                .join("\n") +
            `\n\nInstructions:\n` +
            recipe.instructions.join("\n");

        if (navigator.share) {
            navigator.share({
                title: "Recipe generated by What's In My Fridge",
                text: text,
            });
        } else {
            // Fallback: copy to clipboard
            navigator.clipboard.writeText(text).then(() => {
                toast({
                    title: "Share shopping list!",
                    description: "Copied to clipboard. You can now paste it anywhere you'd like.",
                    variant: "default",
                });
            });
        }
    };

    return (
        <Dialog open={true} onOpenChange={onClose}>
            <DialogContent className="max-w-2xl max-h-[90vh] p-0 overflow-hidden">
                {/* Sticky Header */}
                <div className="sticky top-0 z-10 bg-white border-b px-6 pt-6 pb-4 flex items-start justify-between shadow-sm">
                    <h2 className="text-2xl font-bold text-gray-900 pr-10">{recipe.title}</h2>
                    <div className="flex items-center gap-0.5">
                        <IconButtonWithTooltip
                            disabled={ingredientsDeleted}
                            onClick={shareRecipe}
                            tooltip="Share recipe"
                        >
                            <Share />
                        </IconButtonWithTooltip>
                        <IconButtonWithTooltip
                            disabled={ingredientsDeleted}
                            onClick={() => {
                                onDeleteUsedIngredients(ingredientMatchingResult);
                                setIngredientsDeleted(true);
                            }}
                            tooltip="Delete used ingredients from fridge"
                        >
                            <Delete />
                        </IconButtonWithTooltip>
                        <IconButtonWithTooltip
                            onClick={() => {
                                setShowSoppingList(!showSoppingList);
                            }}
                            tooltip={showSoppingList ? "Hide shopping list" : "Show shopping list"}
                        >
                            {showSoppingList ? <LucideScrollTextFilled /> : <ScrollText />}
                        </IconButtonWithTooltip>
                        <IconButtonWithTooltip
                            className="text-gray-600 hover:text-gray-900"
                            onClick={onToggleSave}
                            tooltip={isSaved ? "Unsave recipe" : "Save recipe"}
                        >
                            {isSaved ? <LucideBookmarkFilled /> : <Bookmark />}
                        </IconButtonWithTooltip>
                        <IconButtonWithTooltip
                            className="text-gray-600 hover:text-gray-900"
                            onClick={onClose}
                            tooltip="Close"
                        >
                            <X />
                        </IconButtonWithTooltip>
                    </div>
                </div>

                {/* Scrollable content only */}
                <div className="overflow-y-auto max-h-[calc(90vh-80px)] px-6 pb-6 pt-4 space-y-6">
                    {/* Recipe Info */}
                    <div className="flex items-center gap-4 text-sm text-gray-600">
                        <div className="flex items-center">
                            <Clock className="w-4 h-4 mr-1" />
                            {recipe.cookingTime} minutes
                        </div>
                        <div className="flex items-center">
                            <ChefHat className="w-4 h-4 mr-1" />
                            {recipe.difficulty}
                        </div>
                        <div className="flex items-center">
                            <Users className="w-4 h-4 mr-1" />
                            2-3 servings
                        </div>
                    </div>

                    <p className="text-gray-700">{recipe.description}</p>

                    <Separator />

                    {/* Ingredients */}
                    <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-4">Ingredients</h3>
                        <div className="space-y-2">
                            {ingredientsWithAvailabilityScore.map((ingredient, index) => (
                                <div
                                    key={`${index}-${ingredient.name}`}
                                    className="flex items-center justify-between py-2 px-3 rounded-lg bg-gray-50"
                                >
                                    <span className="text-gray-900">{ingredient.name}</span>
                                    <div className="flex items-center gap-2">
                                        <span className="text-gray-600">
                                            {ingredient.quantity} {ingredient.unit}
                                        </span>
                                        {getIngredientStatusBadge(ingredient.availabilityScore)}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    <Separator />

                    {/* Shopping List */}
                    {showSoppingList && getShoppingList()}

                    {/* Instructions */}
                    <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-4">Instructions</h3>
                        <ol className="space-y-3">
                            {recipe.instructions.map((instruction, index) => (
                                <li key={`${index}-${instruction}`} className="flex gap-3">
                                    <span className="flex-shrink-0 w-6 h-6 bg-green-600 text-white rounded-full flex items-center justify-center text-sm font-medium">
                                        {index + 1}
                                    </span>
                                    <div className="text-gray-700 pt-0.5">
                                        <ReactMarkdown>{instruction}</ReactMarkdown>
                                    </div>
                                </li>
                            ))}
                        </ol>
                    </div>
                </div>
            </DialogContent>
        </Dialog>
    );
};

export default RecipeDetailModal;
